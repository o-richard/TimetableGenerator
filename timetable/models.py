from django.db import models
from school.models import School, Subjects
from django.utils.text import slugify
from groups.models import Groupclasses, Teachers

# Store timetables generated by a school
class Timetablegroup(models.Model):
    school = models.ForeignKey(School, on_delete=models.CASCADE)
    datecreated = models.DateTimeField(auto_now_add=True)
    timetablegroupname = models.CharField(max_length=20)
    slug = models.SlugField()

    class Meta:
        verbose_name = ("Timetable Group")
        verbose_name_plural = ("Timetable Groups")

    def __str__(self):
        return f"{self.timetablegroupname} by {self.school.schoolname}"

    # Slugify the timetablegroupname as you save
    def save(self, *args, **kwargs):
        self.slug = slugify(self.timetablegroupname)
        super(Timetablegroup, self).save(*args, **kwargs)

# Store lessons of a particular timetable of a particular class of a given timetable group.
class Timetablelessons(models.Model):
    timetablegroup =  models.ForeignKey(Timetablegroup, on_delete=models.CASCADE)
    day = models.CharField(max_length=20)
    starttime = models.TimeField()
    endtime = models.TimeField()
    theclass = models.ForeignKey(Groupclasses, on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teachers, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subjects, on_delete=models.CASCADE)

    class Meta:
        verbose_name = ("Timetable Lesson")
        verbose_name_plural = ("Timetable Lessons")

    def __str__(self):
        return f"{self.timetablegroup.timetablegroupname} lesson"

    # Help identify in templates
    def identity(self):
        return 'Lesson'

# Stores breaks of a particular timetable of a particular class of a given timetable group.
class Timetablebreaks(models.Model):
    timetablegroup =  models.ForeignKey(Timetablegroup, on_delete=models.CASCADE)
    breakname = models.CharField(max_length=100, default='')
    day = models.CharField(max_length=20)
    starttime = models.TimeField()
    endtime = models.TimeField()
    theclass = models.ForeignKey(Groupclasses, on_delete=models.CASCADE)

    class Meta:
        verbose_name = ("Timetable breaks")
        verbose_name_plural = ("Timetable breaks")

    def __str__(self):
        return f"{self.timetablegroup.timetablegroupname} breaks"

    # Help identify in templates
    def identity(self):
        return 'Break'